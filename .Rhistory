bib <- suppressMessages(bib2df::bib2df(bib_file))
if (!missing(rmd_file)) {
used <- get_used_bib(bib_file, rmd_file)
bib <- dplyr::filter(bib, .data$BIBTEXKEY %in% used)
}
authors <- bib$AUTHOR
bib <- dplyr::filter(bib, .data$BIBTEXKEY %in% used)
authors <- lapply(authors, function(x) stringr::str_remove_all(x, "^.+, \\{"))
authors <- lapply(authors, function(x) stringr::str_remove_all(x, "\\}"))
authors <- lapply(authors, function(x) stringr::str_split(x, " ")[[1]][1])
authors <- unlist(authors)
View(bib)
requireNamespace("remotes", quietly = TRUE)
requireNamespace("genderdata", quietly = TRUE)
gender <- table(gender::gender(authors)$gender)
gender
gender::gender(authors)
gender::gender()
gender::gender(names = "authors")
authors <- lapply(authors, function(x) stringr::str_remove_all(x, ","))
authors <- unlist(authors)
gender <- table(gender::gender(authors)$gender)
gender
print(paste0(round(gender[1] / sum(gender), 2) * 100, "% female authors")
print(paste0(round(gender[1] / sum(gender), 2) * 100, "% female authors")
)
authors <- bib$AUTHOR
authors <- lapply(authors, function(x) stringr::str_remove_all(x, "^.+, \\{"))
authors <- lapply(authors, function(x) stringr::str_remove_all(x, "\\}"))
authors <- lapply(authors, function(x) stringr::str_split(x, " ")[[1]][2])
authors <- unlist(authors)
gender <- table(gender::gender(authors)$gender)
print(paste0(round(gender[1] / sum(gender), 2) * 100, "% female authors"))
authors <- bib$AUTHOR
a <- unlist(authors)
a <- as.list(authors)
a <- purrr::flatten(authors)
authors <- bib$AUTHOR
authors <- purrr::flatten(authors)
authors <- lapply(authors, function(x) stringr::str_remove_all(x, "^.+, \\{"))
authors <- lapply(authors, function(x) stringr::str_remove_all(x, "\\}"))
authors <- lapply(authors, function(x) stringr::str_split(x, " ")[[1]][2])
rm(a)
authors <- unlist(authors)
if (!requireNamespace("remotes", quietly = TRUE))
utils::install.packages("remotes")
if (!requireNamespace("genderdata", quietly = TRUE))
remotes::install_github("lmullen/genderdata")
gender <- table(gender::gender(authors)$gender)
print(paste0(round(gender[1] / sum(gender), 2) * 100, "% female authors"))
library(iheiddown)
unlink("test", recursive = TRUE)
test_that("Bibstats works properly", {
rmarkdown::draft(file = "test", template = "Syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"25% female authors")
expect_equal(mean_year(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average date of publication: 1963")
expect_equal(total_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Total number of pages: 7")
expect_equal(mean_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average number of pages: 7")
unlink("test", recursive = TRUE)
})
library(iheiddown)
test_that("Bibstats works properly", {
rmarkdown::draft(file = "test", template = "Syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"25% female authors")
expect_equal(mean_year(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average date of publication: 1963")
expect_equal(total_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Total number of pages: 7")
expect_equal(mean_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average number of pages: 7")
unlink("test", recursive = TRUE)
})
devtools::check()
rmarkdown::draft(file = "test", template = "Syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
library(iheiddown)
+                    package = "iheiddown", create_dir = TRUE, edit = FALSE)
rmarkdown::draft(file = "test", template = "Syllabus",
+                    package = "iheiddown", create_dir = TRUE, edit = FALSE)
rmarkdown::draft(file = "test", template = "Syllabus", package = "iheiddown", create_dir = TRUE, edit = FALSE)
install.packages("trackdown")
trackdown::upload_file()
trackdown::upload_file(file = dirname(rstudioapi::getActiveDocumentContext()$path))
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext()$path)
trackdown::upload_file(file = "C:/Users/bjorn/Documents/GitHub/iheiddown/Untitled/Untitled.Rmd")
trackdown::upload_file(file = "C:/Users/bjorn/Documents/GitHub/iheiddown/Untitled/Untitled.Rmd")
install.packages("googledrive")
install.packages("googledrive")
trackdown::upload_file(file = "C:/Users/bjorn/Documents/GitHub/iheiddown/Untitled/Untitled.Rmd")
library(iheiddown)
?percent_female
source("~/GitHub/iheiddown/R/bibfix.R")
?percent_female
library(iheiddown)
?percent_female
library(iheiddown)
?percent_female
library(iheiddown)
?female_percentage
library(iheiddown)
?percent_female
library(iheiddown)
?percent_female
library(iheiddown)
rmarkdown::draft(file = "test", template = "Syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "author")
?percent_female
library(iheiddown)
?percent_female
percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "publication")
percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = c("author", "publication"))
percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = c("publication", "author")
)
percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = c("publication", "author"))
percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = c("author", "publication"))
bib_file = "test/references.bib"
rmd_file = "test/test.Rmd"
if (missing(bib_file)) bib_file <- find_bib()
if (missing(rmd_file)) rmd_file <- rstudioapi::getSourceEditorContext()$path
by <- match.arg(by)
bib <- suppressWarnings(bib2df::bib2df(bib_file))
if (!missing(rmd_file)) {
used <- get_used_bib(bib_file, rmd_file)
bib <- dplyr::filter(bib, .data$BIBTEXKEY %in% used)
}
bib <- suppressWarnings(bib2df::bib2df(bib_file))
if (!missing(rmd_file)) {
used <- get_used_bib(bib_file, rmd_file)
bib <- dplyr::filter(bib, .data$BIBTEXKEY %in% used)
}
authors <- bib$AUTHOR
authors <- unlist(authors)
authors <- stringr::str_remove(authors, "^.+, \\{")
authors <- stringr::str_remove(authors, "\\}")
authors <- stringr::str_remove(authors, " .+$")
authors <- bib$AUTHOR
authors <- unlist(authors)
authors <- stringr::str_remove(authors, "^.+, \\{")
authors <- stringr::str_remove(authors, "\\}")
authors <- stringr::str_remove(authors, ".+$")
authors <- bib$AUTHOR
authors <- unlist(authors)
authors <- stringr::str_remove(authors, "^.+, \\{")
authors <- stringr::str_remove(authors, "\\}")
authors <- stringr::strsplit(authors, ",")
authors <- stringr::str_remove(authors, ",[\s\S]*$")
authors <- stringr::str_remove(authors, ",[\S]*$")
authors <- stringr::str_remove(authors, ",[\\S]*$")
authors <- stringr::str_remove(authors, ",")
authors <- bib$AUTHOR
authors <- unlist(authors)
authors <- stringr::str_remove(authors, "^.+, \\{")
authors <- stringr::str_remove(authors, "\\}")
authors <- stringr::str_remove(authors, "\\S,")
authors <- bib$AUTHOR
authors <- unlist(authors)
authors <- stringr::str_remove(authors, "^.+, \\{")
authors <- stringr::str_remove(authors, "\\}")
authors <- stringr::str_remove(authors, "\\w,")
authors <- bib$AUTHOR
authors <- unlist(authors)
authors <- stringr::str_remove(authors, "^.+, \\{")
authors <- stringr::str_remove(authors, "\\}")
authors <- stringr::str_remove(authors, "*,")
authors <- stringr::str_remove(authors, ".*,")
authors <- bib$AUTHOR
authors <- unlist(authors)
authors <- stringr::str_remove(authors, "^.+, \\{")
authors <- stringr::str_remove(authors, "\\}")
authors <- stringr::str_remove(authors, ".*,[:blank:]")
gender <- table(gender::gender(authors)$gender)
print(paste0(round(gender[1] / sum(gender), 2) * 100, "% female authors"))
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) stringr::str_remove_all(x, "^.+, \\{"))
authors <- lapply(authors,
function(x) stringr::str_remove_all(x, "\\}"))
authors <- lapply(authors,
stringr::str_remove(authors, ".*,[:blank:]"))
authors <- lapply(authors,
function(x) stringr::str_remove(authors, ".*,[:blank:]"))
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) stringr::str_remove_all(x, "^.+, \\{"))
authors <- lapply(authors,
function(x) stringr::str_remove_all(x, "\\}"))
authors <- lapply(authors,
function(x) stringr::str_remove(authors, ".*,[:blank:]"))
gender <- sapply(authors,
function(x) any(gender::gender(x)$gender == "female"))
print(paste0(round(sum(gender) / length(gender), 2) * 100,
"% female authors"))
authors <- lapply(authors,
function(x) stringr::str_remove_all(x, "^.+, \\{"))
authors <- lapply(authors,
function(x) stringr::str_remove_all(x, "\\}"))
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) sapply(x, stringr::str_remove_all(x, "^.+, \\{")))
?every
?lapply
authors <- lapply(authors,
function(x) {sapply(y, stringr::str_remove_all(y, "^.+, \\{"))})
authors <- lapply(authors,
function(x) for (i in 1:length(x)){stringr::str_remove_all(x[i], "^.+, \\{")})
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) for (i in 1:length(x)){stringr::str_remove_all(x[i], ",")})
?str_remove_all
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) for (i in 1:length(x)){stringr::str_remove(x[i], ",")})
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) for (i in 1:length(x)){stringr::str_remove(x[[i]], ",")})
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) for (i in 1:length(x)){print(length(x))})
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) for (i in 1:length(x)){print(x[[i]])})
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) for (i in 1:length(x)){stringr::str_remove(x, ",")})
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) stringr::str_remove(x, ","))
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) stringr::str_remove(authors, ".*,[:blank:]"))
authors <- bib$AUTHOR
authors <- lapply(authors,
function(x) stringr::str_remove(authors, ".*,"))
authors <- bib$AUTHOR
authors <- stringr::str_remove(authors, ".*,")
authors <- bib$AUTHOR
authors[1]
authors[[1]
]
authors[[2]]
authors[[2]][[2]]
authors <- bib$AUTHOR
for (i in 1:length(authors)) {
for (j in 1:length(auhtors[[i]])) {
authors[[i]][[j]] <- stringr::str_remove(authors[[i]][[j]],
"^.+, \\{")
authors[[i]][[j]] <- stringr::str_remove(authors[[i]][[j]],
"\\}")
authors[[i]][[j]] <- stringr::str_remove(authors[[i]][[j]],
".*,[:blank:]")
}
}
for (i in 1:length(authors)) {
for (j in 1:length(authors[[i]])) {
authors[[i]][[j]] <- stringr::str_remove(authors[[i]][[j]],
"^.+, \\{")
authors[[i]][[j]] <- stringr::str_remove(authors[[i]][[j]],
"\\}")
authors[[i]][[j]] <- stringr::str_remove(authors[[i]][[j]],
".*,[:blank:]")
}
}
gender <- sapply(authors,
function(x) any(gender::gender(x)$gender == "female"))
print(paste0(round(sum(gender) / length(gender), 2) * 100,
"% female authors"))
library(iheiddown)
percent_female(bib_file = bib_file, rmd_file = rmd_file)
percent_female(bib_file = bib_file, rmd_file = rmd_file, by = "publication")
test_that("Bibstats works properly", {
rmarkdown::draft(file = "test", template = "Syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "author"),
"25% female authors")
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "publication"),
"33% female authors")
expect_equal(mean_year(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average date of publication: 1963")
expect_equal(total_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Total number of pages: 7")
expect_equal(mean_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average number of pages: 7")
unlink("test", recursive = TRUE)
})
library(testthat)
test_that("Bibstats works properly", {
rmarkdown::draft(file = "test", template = "Syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "author"),
"25% female authors")
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "publication"),
"33% female authors")
expect_equal(mean_year(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average date of publication: 1963")
expect_equal(total_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Total number of pages: 7")
expect_equal(mean_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average number of pages: 7")
unlink("test", recursive = TRUE)
})
test_that("Bibstats works properly", {
rmarkdown::draft(file = "test", template = "Syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "author"),
"25% female authors")
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "publication"),
"33% female authors")
expect_equal(mean_year(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average date of publication: 1963")
expect_equal(total_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Total number of pages: 7")
expect_equal(mean_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average number of pages: 7")
unlink("test", recursive = TRUE)
})
rmarkdown::draft(file = "test", template = "Syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
devtools::check()
library(iheiddown)
devtools::check()
rmarkdown::draft(file = "test", template = "Syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
library(iheiddown)
rmarkdown::draft(file = "test", template = "Syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
percent_female(bib_file, rmd_file)
library(iheiddown)
library(iheiddown)
library(iheiddown)
library(iheiddown)
library(iheiddown)
library(iheiddown)
library(iheiddown)
devtools::check()
library(iheiddown)
rmarkdown::draft(file = "UntitledPS", template = "Problem_Set",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
rmarkdown::draft(file = "UntitledPS", template = "Problem Set",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
rmarkdown::draft(file = "UntitledPS", template = "problemset",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
rmarkdown::draft(file = "00-Example", template = "thesis",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
rmarkdown::draft(file = "Untitled", template = "syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
rmarkdown::draft(file = "Untitled", template = "syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
rmarkdown::draft(file = "index", template = "Presentation",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
# Automatic rendering of thesis_pdf will run on a Windows VM
#Step 1 Create an example project
rmarkdown::draft(file = "index", template = "presentation",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
test_that("Bibstats works properly", {
rmarkdown::draft(file = "test", template = "syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "author"),
"25% female authors")
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "publication"),
"33% female authors")
expect_equal(mean_year(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average date of publication: 1963")
expect_equal(total_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Total number of pages: 7")
expect_equal(mean_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average number of pages: 7")
unlink("test", recursive = TRUE)
})
library(testthat)
test_that("Bibstats works properly", {
rmarkdown::draft(file = "test", template = "syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "author"),
"25% female authors")
expect_equal(percent_female(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd",
by = "publication"),
"33% female authors")
expect_equal(mean_year(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average date of publication: 1963")
expect_equal(total_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Total number of pages: 7")
expect_equal(mean_pages(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
"Average number of pages: 7")
unlink("test", recursive = TRUE)
})
test_that("Bibfix works properly", {
rmarkdown::draft(file = "test", template = "Syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(fix_bib(bib_file = "test/references.bib"),
"test/references.bib")
expect_equal(get_used_bib(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
c("Darwin1859", "iheiddown2020", "Satchell2009" ))
unlink("test", recursive = TRUE)
})
test_that("Bibfix works properly", {
rmarkdown::draft(file = "test", template = "syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(fix_bib(bib_file = "test/references.bib"),
"test/references.bib")
expect_equal(get_used_bib(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
c("Darwin1859", "iheiddown2020", "Satchell2009" ))
unlink("test", recursive = TRUE)
})
unlink("test", recursive = TRUE)
test_that("Bibfix works properly", {
rmarkdown::draft(file = "test", template = "syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(fix_bib(bib_file = "test/references.bib"),
"test/references.bib")
expect_equal(get_used_bib(bib_file = "test/references.bib",
rmd_file = "test/test.Rmd"),
c("Darwin1859", "iheiddown2020", "Satchell2009" ))
unlink("test", recursive = TRUE)
})
library(iheiddown)
test_that("Bibfix works properly", {
rmarkdown::draft(file = "test", template = "syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(fix_bib(bib_file = "test/references.bib"),
"test/references.bib")
unlink("test", recursive = TRUE)
})
unlink("test", recursive = TRUE)
test_that("Bibfix works properly", {
rmarkdown::draft(file = "test", template = "syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(fix_bib(bib_file = "test/references.bib"),
"test/references.bib")
unlink("test", recursive = TRUE)
})
test_that("Bibfix works properly", {
rmarkdown::draft(file = "test", template = "syllabus",
package = "iheiddown", create_dir = TRUE, edit = FALSE)
expect_equal(fix_bib(bib_file = "test/references.bib"),
"test/references.bib")
unlink("test", recursive = TRUE)
})
devtools::check()
pkgdown::build_site()
utils::install.packages()
pkgdown::build_site()
deploy_to_branch()
pkgdown::deploy_to_branch()
pkgdown::deploy_to_branch()
pkgdown::deploy_to_branch()
